// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(cuid())
  name      String?
  email     String       @unique
  password  String
  role      Role         @default(TEACHER)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  quizzes   Quiz[]
  answers   QuizAnswer[]
}

model Quiz {
  id              String           @id @default(cuid())
  title           String
  description     String?
  code            String           @unique
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  questions       Question[]
  participants    Participant[]
  LiveQuizSession LiveQuizSession?
}

model Question {
  id            String       @id @default(cuid())
  text          String
  options       String[] // Stored as JSON array
  correctAnswer Int // Index of correct answer
  category      String       @default("umum") // Main category of the question
  subcategory   String? // The subcategory of the question
  quizId        String
  quiz          Quiz         @relation(fields: [quizId], references: [id])
  order         Int
  answers       QuizAnswer[]
}

model Participant {
  id        String   @id @default(cuid())
  name      String
  score     Int      @default(0)
  answers   Json? // Store participant's answers as JSON
  createdAt DateTime @default(now())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
}

model LiveQuizSession {
  id        String   @id @default(cuid())
  quizId    String   @unique
  roomCode  String
  status    String   @default("waiting") // waiting, in_progress, completed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([roomCode])
}

model QuizAnswer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  answer     Int
  isCorrect  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@index([userId])
  @@index([questionId])
}

enum Role {
  TEACHER
  STUDENT
}
